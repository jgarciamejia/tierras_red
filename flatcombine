#!/usr/bin/env python

from __future__ import print_function

import argparse
import logging
import math
import re
import sys
import warnings

import numpy

try:
  import astropy.utils.exceptions
  import astropy.io.fits as pyfits
except ImportError:
  import pyfits

import lfa

from fitsutil import *

def process_extension(imp):
  hdr = imp.header
  
  if "BIASSEC" in hdr:
    biassec = fits_section(hdr["BIASSEC"])
  else:
    biassec = None
      
  if "TRIMSEC" in hdr:
    trimsec = fits_section(hdr["TRIMSEC"])
  else:
    trimsec = None
      
  raw = numpy.float32(imp.data)

  if biassec is not None:
    biaslev, biassig = lfa.skylevel_image(raw[biassec[2]:biassec[3],biassec[0]:biassec[1]])
  else:
    biaslev = 0

  if trimsec is not None:
    procimg = raw[trimsec[2]:trimsec[3],trimsec[0]:trimsec[1]] - biaslev
  else:
    procimg = raw - biaslev

  skylev, skynoise = lfa.skylevel_image(procimg)
    
  return procimg / skylev, skylev, skynoise / skylev

if __name__ == "__main__":
  try:
    warnings.simplefilter("ignore",
                          astropy.utils.exceptions.AstropyDeprecationWarning)
  except NameError:
    pass
  
  # Deal with the command line.
  ap = argparse.ArgumentParser()
  ap.add_argument("filelist", metavar="file", nargs="+", help="input files")
  ap.add_argument("-o", help="output file")

  if len(sys.argv) == 1:
    ap.print_help(sys.stderr)
    sys.exit(1)
  
  args = ap.parse_args()
  
  nf = len(args.filelist)
  
  fplist = [ pyfits.open(filename) for filename in args.filelist ]
  
  outhdus = []

  for iext, rmp in enumerate(fplist[0]):
    if hasimg(rmp):
      hdr = rmp.header
      hdrout = hdr.copy(strip=True)

      for key in ("BIASSEC", "SMEARSEC"):
        if key in hdrout:
          del hdrout[key]

      allimg = [None] * nf
      allsky = [None] * nf
      allrms = [None] * nf

      for ifile in range(nf):
        # Open file.
        ifp = fplist[ifile]
        imp = ifp[iext]
        allimg[ifile], allsky[ifile], allrms[ifile] = process_extension(imp)

      allimg = numpy.array(allimg)
      allsky = numpy.array(allsky)
      allrms = numpy.array(allrms)

      # Median combine normalized images.
      medimg = numpy.median(allimg, axis=0)

      ny, nx = medimg.shape
      
      # Simple upper envelope clipping.
      resid = allimg - medimg

      # This trick broadcasts the comparison to rms over the first dimension
      # of "resid" (the input file) by transposing temporarily so it's the
      # last dimension during the calculation.
      ww = (resid.T > 3.0 * allrms).T
      
      nclipped = numpy.sum(ww)

      if nclipped > 0:
        allimg[ww] = numpy.nan
        medimg[:] = numpy.nanmedian(allimg, axis=0)

      logging.info("Clipped {0:d}".format(nclipped))

      # Scale output back to original level.
      outimg = medimg * allsky[0]

      # Adjust headers to account for trim.
      newsect = "[1:{0:d},1:{1:d}]".format(nx, ny)
      hdrout["DATASEC"] = newsect
      hdrout["TRIMSEC"] = newsect

      if iext == 0:
        outhdu = pyfits.PrimaryHDU(outimg, header=hdrout)
      else:
        outhdu = pyfits.ImageHDU(outimg, header=hdrout)
    else:
      outhdu = rmp.copy()

    outhdus.append(outhdu)

  # Write output file.
  if args.o is not None:
    ohl = pyfits.HDUList(outhdus)
    ohl.writeto(args.o, clobber=True)
